/*
#version 430 core
#define M_PI 3.1415926535897932384626433832795

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba32f) writeonly uniform image2D tilde_h0k;

layout (binding = 1, rgba32f) writeonly uniform image2D tilde_h0minusk;

layout (binding = 2) uniform sampler2D noise_r0;
layout (binding = 3) uniform sampler2D noise_i0;
layout (binding = 4) uniform sampler2D noise_r1;
layout (binding = 5) uniform sampler2D noise_i1;

uniform	int N = 256;  //FFT resolution
uniform int L = 1000; //Ocean dimension
uniform float A = 20; //apmtitude of what ???s
uniform float windspeed =  26;
uniform vec2 w = vec2(1,0); // wind speed vector
uniform float l;            // what is this l?
uniform float alignment;

const float g = 9.81;

// Box-Muller-Method

vec4 gaussRND()
{	
	vec2 texCoord = vec2(gl_GlobalInvocationID.xy)/float(N);
	
	float noise00 = clamp(texture(noise_r0, texCoord).r +0.00001, 0.0, 1.0);
	float noise01 = clamp(texture(noise_i0, texCoord).r +0.00001, 0.0, 1.0);
	float noise02 = clamp(texture(noise_r1, texCoord).r +0.00001, 0.0, 1.0);
	float noise03 = clamp(texture(noise_i1, texCoord).r +0.00001, 0.0, 1.0);
	
	float u0 = 2.0*M_PI*noise00;
	float v0 = sqrt(-2.0 * log(noise01));
	float u1 = 2.0*M_PI*noise02;
	float v1 = sqrt(-2.0 * log(noise03));
	
	vec4 rnd = vec4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));
	
	return rnd;
}

vec4 map(vec4 v){
	return (v + vec4(1.0))/2;
}

void main(void)
{
	vec2 x = vec2(gl_GlobalInvocationID.xy) ;
	
	vec2 k = vec2(2.0 * M_PI * x.x/L, 2.0 * M_PI * x.y/L);

	float L_ = (windspeed * windspeed)/g;
	float mag = length(k);
	if (mag < 0.0001) mag = 0.0001;
	float magSq = mag * mag;

	float h0k = clamp(sqrt((A/(magSq*magSq)) * pow(dot(normalize(k), normalize(w)), 4.0) * 
	exp(-(1.0/(magSq* L_* L_))) ) /sqrt(2.0), 0, 1000000);

	float h0minusk = clamp(sqrt((A/(magSq*magSq)) * pow(dot(normalize(-k), normalize(w)), 4.0) * 
	exp(-(1.0/(magSq* L_* L_))) ) /sqrt(2.0), 0, 1000000);
	vec4 gauss_random = gaussRND();
	gauss_random = map(gauss_random);

	imageStore(tilde_h0k, ivec2(gl_GlobalInvocationID.xy), vec4(gauss_random.xy *h0k, 0,  1));
	
	imageStore(tilde_h0minusk, ivec2(gl_GlobalInvocationID.xy), vec4(gauss_random.zw* h0minusk ,0, 1));
}
*/

#version 430 core
#define M_PI 3.1415926535897932384626433832795

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba32f) writeonly uniform image2D tilde_h0k;

layout (binding = 1, rgba32f) writeonly uniform image2D tilde_h0minusk;

layout (binding = 2) uniform sampler2D noise_r0;
layout (binding = 3) uniform sampler2D noise_i0;
layout (binding = 4) uniform sampler2D noise_r1;
layout (binding = 5) uniform sampler2D noise_i1;

/*
uniform	int    N = 256;            //FFT resolution
uniform int    ocean_dimension = 256;           //Ocean dimension
uniform float  amplitude = 20;           //apmtitude of what ???s
uniform float  windspeed =  26;
uniform vec2   wind_dir = vec2(1,0);     // wind speed vector
uniform float  l;               // what is this l?
uniform float  alignment;
*/

uniform	int N = 256;  //FFT resolution
uniform int L = 1000; //Ocean dimension
uniform float A = 20; //apmtitude of what ???s
uniform float windspeed =  26;
uniform vec2 w = vec2(1,0); // wind speed vector
uniform float l;            // what is this l?
uniform float alignment;

const float g = 9.81;

float k_w_power = 4.0;                // this can effect the strength of the wave

// Box-Muller-Method

vec4 gaussRND()
{	
	vec2 texCoord = vec2(gl_GlobalInvocationID.xy)/float(N);
	
	float noise00 = clamp(texture(noise_r0, texCoord).r +0.00001, 0.0, 1.0);
	float noise01 = clamp(texture(noise_i0, texCoord).r +0.00001, 0.0, 1.0);
	float noise02 = clamp(texture(noise_r1, texCoord).r +0.00001, 0.0, 1.0);
	float noise03 = clamp(texture(noise_i1, texCoord).r +0.00001, 0.0, 1.0);
	
	float u0 = 2.0*M_PI*noise00;
	float v0 = sqrt(-2.0 * log(noise01));
	float u1 = 2.0*M_PI*noise02;
	float v1 = sqrt(-2.0 * log(noise03));
	
	vec4 rnd = vec4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));
	
	return rnd;
}

/*
vec4 map(vec4 v){
	return (v + vec4(1.0))/2;
}

float P_k (vec2 k){
	
	float k_mag = length(k);
	// prevent divide by 0
	if (k_mag < 0.0001) 
		k_mag = 0.0001;

	float L_  = (windspeed * windspeed)/g;
	float k_dot_w = dot(normalize(k), normalize(wind_dir) );
	float e_term = exp(-1 /(k_mag * k_mag * L_ *L_));
	float p_k = amplitude  * e_term * pow(k_dot_w, k_w_power) / (k_mag*k_mag*k_mag*k_mag);

	return p_k;
}

float h0_k (vec2 k){
	float h0k = sqrt(P_k(k)) / sqrt(2);
	return clamp(h0k, -4000.0, 4000.0) ;
}
*/
void main(void)
{
	vec2 x = vec2(gl_GlobalInvocationID.xy) ;
	
	vec2 k = vec2(2.0 * M_PI * x.x/N, 2.0 * M_PI * x.y/N);


	//float h0k = h0_k(k);

	//float h0minusk = h0_k(-k);
	vec4 gauss_random = gaussRND();

	vec2 texCoord = vec2(gl_GlobalInvocationID.xy)/float(N);
	
	float noise00 = clamp(texture(noise_r0, texCoord).r +0.00001, 0.0, 1.0);
	float noise01 = clamp(texture(noise_i0, texCoord).r +0.00001, 0.0, 1.0);
	float noise02 = clamp(texture(noise_r1, texCoord).r +0.00001, 0.0, 1.0);
	float noise03 = clamp(texture(noise_i1, texCoord).r +0.00001, 0.0, 1.0);

	imageStore(tilde_h0k, ivec2(gl_GlobalInvocationID.xy), vec4(noise00, 0, 0, 1));
	imageStore(tilde_h0minusk, ivec2(gl_GlobalInvocationID.xy), vec4(noise02,0 ,0, 1));
}



