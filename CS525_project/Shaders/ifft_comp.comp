
#version 430

#define PI		3.1415926535897932
#define FFT_DIMENSION 256

layout(rgba32f, binding = 0) uniform readonly image2D readbuff;
layout(rgba32f, binding = 1) uniform writeonly image2D writebuff;

vec2 ComplexMul(vec2 z, vec2 w) {
	return vec2(z.x * w.x - z.y * w.y, z.y * w.x + z.x * w.y);
}

// each work group use a shared 2-D array as a pingpong buffer
shared vec2 pingpong_buffer[2][FFT_DIMENSION];


layout (local_size_x = FFT_DIMENSION) in;

int bit_reverse(int x, int step);
int get_w_index(int x, int stage);

//helper functions and struct for calculation
struct complex{
	float r;
	float i;
};

complex add_complex (complex c1, complex c2);
complex mult_complex(complex c1, complex c2);
complex create_complex(float r, float i);

void main()
{
	// local group size?
	const float N  = float(FFT_DIMENSION);
	const int step = int(log2(FFT_DIMENSION));

	int z = int(gl_WorkGroupID.x);
	int x = int(gl_LocalInvocationID.x);

	// STEP 1: load row/column and reorder them by bit reverse index
	int bit_reversed_index = bit_reverse(x, step);
	pingpong_buffer[0][bit_reversed_index ] = imageLoad(readbuff, ivec2(z, x)).rg;

	barrier();

	// STEP 2: perform butterfly passes
	int pingpong = 0;

	// compute  a + w_n_k * b;
	for (int stage = 1; stage <= step; ++stage) {
		int butterfly_groupsize = int(pow(2, stage));				// butterfly group height
		int butterfly_wingsize = butterfly_groupsize /2;			// butterfly group half height

		int k = get_w_index(x, stage);
		int i = (x & ~(butterfly_groupsize  - 1));		// butterfly group starting offset
		int j = (x &  (butterfly_wingsize   - 1));		// butterfly index in group

		// twiddle factor W_N^k
		float theta = (2 * PI * float(k)) / N;

		// Euler formula
		vec2 w_n_k = vec2(cos(theta), sin(theta));

		vec2 b = pingpong_buffer[pingpong][i + j + butterfly_wingsize];
		vec2 a = pingpong_buffer[pingpong][i + j];

		complex b_complex   = create_complex(b.r, b.g);
		complex a_complex   = create_complex(a.r, a.g);
		complex wnk_complex = create_complex(w_n_k.r, w_n_k.g);

		pingpong = 1 - pingpong;

		// write from ping to pong  or pong to ping
		complex ht = add_complex(a_complex, mult_complex(b_complex, wnk_complex));
		pingpong_buffer[pingpong][x] = vec2(ht.r, ht.i);

		barrier();
	}

	// STEP 3: write output
	vec2 result = pingpong_buffer[pingpong][x];

	// reverse the order
	imageStore(writebuff, ivec2(x, z), vec4(result, 0.0, 1.0));

}


int bit_reverse(int x, int step){
	int res = (bitfieldReverse(x) >> (32 - step))&(FFT_DIMENSION - 1);
	return res;
}


int get_w_index(int x, int stage){
	int k = int(x* FFT_DIMENSION /(pow(2, stage)));
	return k;
}

complex add_complex (complex c1, complex c2){
	complex res;
	res.r = c1.r + c2.r;
	res.i = c1.i + c2.i;
	return res;
}

complex mult_complex(complex c1, complex c2){
	complex res;
	res.r = c1.r*c2.r - c1.i*c2.i;
	res.i = c1.r*c2.i + c1.i*c2.r;
	return res;
}

complex create_complex(float r, float i){
	complex res;
	res.r = r;
	res.i = i;
	return res;
}

